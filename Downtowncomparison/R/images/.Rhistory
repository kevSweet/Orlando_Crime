yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 'Black' else 'White')
}
imageGenerator <- function(){
l <- list()
for(i in 1:1000){
image <- array(NA, c(100,100,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
l[i] <- image
}
return(l)
}
viewImages <- function(completedPrediction, yiqCalc){
}
l <- imageGenerator()
l[1]
l <- list()
image <- array(NA, c(100,100,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
image[1,1,1]
image[1,2,1]
image[1,3,2]
l[i] <- image
i <- 1
l[i] <- image
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 'Black' else 'White')
}
viewImages <- function(completedPrediction, yiqCalc){
}
main <- function(){
l <- imageGenerator()
#run yiqPrediction on gen images
#run prediction code
#run viewImages
}
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 'Black' else 'White')
}
imageGenerator <- function(){
l <- list()
for(i in 1:1000){
image <- array(NA, c(100,100,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
l[[i]] <- image
}
return(l)
}
l <- imageGenerator()
lyiq <- array(NA,dim = 1000)
lyiq <- array(NA,dim = length(l))
for(i in 1:length(l)){
lyiq[i] <- yiqCalc(l[[i]])
}
# 0 -> Black 1 -> White
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 0 else 1)
}
lyiq <- array(NA,dim = length(l))
for(i in 1:length(l)){
lyiq[i] <- yiqCalc(l[[i]])
}
# 0 -> Black 1 -> White
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 0 else 1)
}
imageGenerator <- function(numofImages){
l <- list()
for(i in 1:numofImages){
image <- array(NA, c(10,10,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
l[[i]] <- image
}
return(l)
}
ltrain <- imageGenerator(2000)
ltest <- imageGenerator(1000)
# 0 -> Black 1 -> White
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 0 else 1)
}
imageGenerator <- function(numofImages){
l <- list()
for(i in 1:numofImages){
image <- array(NA, c(10,10,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
l[[i]] <- image
}
return(l)
}
viewImages <- function(completedPrediction, yiqCalc){
}
ltrain <- imageGenerator(10000)
ltest <- imageGenerator(2000)
install.packages(sigmoid)
install.packages("sigmoid")
library(sigmoid)
?sigmoid
?Normal
#initialize neural network weights
wghts <- c(rnorm(),rnorm(),rnorm())
#initialize neural network weights
wghts <- rnorm(3)
b <- rnorm(1)
sigmoid(1.25)
library(sigmoid)
sigmoid(1.25)
costFunc <- function(yiqTarget,rgbPrediction,numImages){
return((((rgbPrediction - yiqTarget))^2)/numImages)
}
costFunc(1,.7772999,1)
library(sigmoid)
library(png)
# 0 -> Black 1 -> White. Predefined function for contrasting text with background
yiqCalc <- function(rgbmatrix){
r <- rgbmatrix[1,1,1] * 255
g <- rgbmatrix[1,1,2] * 255
b <- rgbmatrix[1,1,3] * 255
yiq <- (r*299 + g*587 + b*114)/1000
return(if(yiq >= 128) 0 else 1)
}
#generates 10x10 random pixel images of a single color
imageGenerator <- function(numofImages){
l <- list()
for(i in 1:numofImages){
image <- array(NA, c(10,10,3))
image[,,1] <- runif(1,min = 0, max = 1)
image[,,2] <- runif(1,min = 0, max = 1)
image[,,3] <- runif(1,min = 0, max = 1)
l[[i]] <- image
}
return(l)
}
viewImages <- function(completedPrediction, yiqCalc){
}
#generate test/train images
ltrain <- imageGenerator(10000)
ltest <- imageGenerator(2000)
#generate output of yiq function (function we will be training NN to) for train and test set
lyiqtrain <- array(NA,dim = length(ltrain))
lyiqtest <- array(NA,dim = length(ltest))
for(i in 1:length(l)){
lyiqtrain[i] <- yiqCalc(ltrain[[i]])
lyiqtest[i] <- yiqCalc(ltest[[i]])
}
for(i in 1:length(ltrain)){
lyiqtrain[i] <- yiqCalc(ltrain[[i]])
if(i<=2000){
lyiqtest[i] <- yiqCalc(ltest[[i]])
}
}
#initialize neural network weights and bias
wghts <- rnorm(3)
b <- rnorm(1)
learn_rate <- 0.2
for(i in 1:50000){
r_indx <- runif(1,min = 1,max = 10000)
selPoint <- ltrain[[r_indx]]
target <- lyiqtrain[[r_indx]]
#feed forward
z <- selPoint[1,1,1]*wghts[1]+selPoint[1,1,2]*wghts[2]+selPoint[1,1,3]*wghts[3]+b
pred <- sigmoid(z)
cost <- (pred - target)^2
dcost_dpred <- 2 * (pred - target)
#d/dz sigmoid z = sigmoid(z)*(1-sigmoid(z))
dpred_dz <- sigmoid(z) * (1-sigmoid(z))
#how does z change with respect to the weights and b?
dz_dw1 <- selPoint[1,1,1]
dz_dw2 <- selPoint[1,1,2]
dz_dw3 <- selPoint[1,1,3]
dz_db <- 1
#now we can get the partial derivatives using the chain rule
#We are bringing how the cost changes through each function, first through the square, then through the sigmoid
#and finally whatever is multiplying our parameter of interest becomes the last past
dcost_dw1 <- dcost_dpred * dpred_dz * dz_dw1
dcost_dw2 <- dcost_dpred * dpred_dz * dz_dw2
dcost_dw3 <- dcost_dpred * dpred_dz * dz_dw3
dcost_db <- dcost_dpred * dpred_dz * dz_db
#update parameters
wghts[1] <- wghts[1] - learn_rate*dcost_dw1
wghts[2] <- wghts[2] - learn_rate*dcost_dw2
wghts[3] <- whts[3] - learn_rate*dcost_dw3
b <- b - learn_rate*dcost_db
}
#initialize neural network weights and bias
wghts <- rnorm(3)
b <- rnorm(1)
learn_rate <- 0.2
for(i in 1:50000){
r_indx <- runif(1,min = 1,max = 10000)
selPoint <- ltrain[[r_indx]]
target <- lyiqtrain[[r_indx]]
#feed forward
z <- selPoint[1,1,1]*wghts[1]+selPoint[1,1,2]*wghts[2]+selPoint[1,1,3]*wghts[3]+b
pred <- sigmoid(z)
cost <- (pred - target)^2
dcost_dpred <- 2 * (pred - target)
#d/dz sigmoid z = sigmoid(z)*(1-sigmoid(z))
dpred_dz <- sigmoid(z) * (1-sigmoid(z))
#how does z change with respect to the weights and b?
dz_dw1 <- selPoint[1,1,1]
dz_dw2 <- selPoint[1,1,2]
dz_dw3 <- selPoint[1,1,3]
dz_db <- 1
#now we can get the partial derivatives using the chain rule
#We are bringing how the cost changes through each function, first through the square, then through the sigmoid
#and finally whatever is multiplying our parameter of interest becomes the last past
dcost_dw1 <- dcost_dpred * dpred_dz * dz_dw1
dcost_dw2 <- dcost_dpred * dpred_dz * dz_dw2
dcost_dw3 <- dcost_dpred * dpred_dz * dz_dw3
dcost_db <- dcost_dpred * dpred_dz * dz_db
#update parameters
wghts[1] <- wghts[1] - learn_rate*dcost_dw1
wghts[2] <- wghts[2] - learn_rate*dcost_dw2
wghts[3] <- wghts[3] - learn_rate*dcost_dw3
b <- b - learn_rate*dcost_db
}
cost
#test
for(i in 1:2000){
selPoint <- ltest[[i]]
target <- lyiqtest[[i]]
z <- selPoint[1,1,1]*wghts[1]+selPoint[1,1,2]*wghts[2]+selPoint[1,1,3]*wghts[3]+b
pred <- sigmoid(z)
cost <- (pred - target)^2
}
lyiqtest[[1]]
selPoint <- ltest[[1]]
z <- selPoint[1,1,1]*wghts[1]+selPoint[1,1,2]*wghts[2]+selPoint[1,1,3]*wghts[3]+b
pred <- sigmoid(z)
lyiqtest[[1]]
pred
selPoint <- ltest[[2]]
z <- selPoint[1,1,1]*wghts[1]+selPoint[1,1,2]*wghts[2]+selPoint[1,1,3]*wghts[3]+b
pred <- sigmoid(z)
lyiqtest[[2]]
pred
prdictNN(wghts,b,ltest[[2]])
prdictNN <- function(wghts,b,clrdimg){
z <- clrdimg[1,1,1]*wghts[1]+clrdimg[1,1,2]*wghts[2]+clrdimg[1,1,3]*wghts[3]+b
return(sigmoid(z))
}
prdictNN(wghts,b,ltest[[2]])
library(sigmoid)
prdictNN(wghts,b,ltest[[2]])
#test
for(i in 1:2000){
selPoint <- ltest[[i]]
target <- lyiqtest[[i]]
pred <- prdictNN(wghts,b,selPoint)
cost <- (pred - target)^2
}
cost
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R")
OPD_CrimesParsed_NoUnmapped <- read.csv("OPD_CrimesParsed_NoUnmapped.csv")
library(MeanShift)
install.packages("MeanShift")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("lubridate")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
?MeanShift
#get map of Orlando
orlando_map <- get_map(location = "Orlando", maptype = "roadmap", zoom = 14)
setwd("./images")
getwd()
#get map of Orlando
orlando_map <- get_map(location = "Orlando", maptype = "roadmap", zoom = 14)
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
View(OPD_CrimesParsed_NoUnmapped)
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/Downtowncomparison/R/meanshiftNeqmonth.R', echo=TRUE)
#get map of Orlando
orlando_map <- get_map(location = "Orlando", maptype = "roadmap", zoom = 14)
#defines latandlong as columns of opd crimes offense type, lat, and long
latandlong <- subset(OPD_CrimesParsed_NoUnmapped, select = c("Case.Date.Time","Case.Offense.Type", "Latitude", "Longitude"))
#narrows dataset to downtown
downtownlatandlong <- subset(latandlong, Latitude > 28.514520 & Latitude < 28.561178 & Longitude > -81.401205 & Longitude < -81.352166)
#initializes months
Months <- findDateRange("2009-1-1","2009-2-28")
month.coords <- subset(Months, select = c("Latitude","Longitude"))
#performs mean shift clustering with bandwidth h
ms <- msClustering(t(month.coords),h=.00275,kernel = "gaussianKernel",multi.core = TRUE)
#ms returned 67 clusters with h value of .00275 (gauss kernel)
km <- kmeans(month.coords, centers = 67)
df <- data.frame(latitude = km$centers[,1], longitude = km$centers[,2])
#ms returned 67 clusters with h value of .00275 (gauss kernel)
km <- kmeans(month.coords, centers = 67)
View(OPD_CrimesParsed_NoUnmapped)
