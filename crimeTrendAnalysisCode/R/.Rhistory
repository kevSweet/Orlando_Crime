#read in data
matData <- read_csv("./data/OPD_CrimesParsed_NoUnmapped.csv", col_types = cols(`Case Date Time` = col_datetime(format = "%m/%d/%Y %H:%M")))
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R")
#read in data
matData <- read.csv("./data/OPD_CrimesParsed_NoUnmapped.csv", col_types = cols(`Case Date Time` = col_datetime(format = "%m/%d/%Y %H:%M")))
source("./latlongtoNM.R")
source("./timeline.R")
source("./differences.R")
source("./findMax.R")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R/main.R', echo=TRUE)
install.packages("NISTunits")
source("./latlongtoNM.R")
source("./timeline.R")
source("./differences.R")
source("./findMax.R")
source("./matrixovertime.R")
library(lubridate)
library(readr)
library(anytime)
install.packages("readr")
install.packages("anytime")
library(lubridate)
library(readr)
library(anytime)
library(NISTunits)
library(Matrix)
library(png)
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R/main.R', echo=TRUE)
warnings()
View(l)
View(matData)
source("./latlongtoNM.R")
source("./timeline.R")
source("./differences.R")
source("./findMax.R")
source("./matrixovertime.R")
library(lubridate)
library(readr)
library(anytime)
library(NISTunits)
library(Matrix)
library(png)
#read in data
matData <- read_csv("./data/OPD_CrimesParsed_NoUnmapped.csv", col_types = cols(`Case Date Time` = col_datetime(format = "%m/%d/%Y %H:%M")))
#select only relevant columns, also converts Datetime to Unix Time
matData <- data.matrix(subset(matData, select = c("Latitude", "Longitude","Case Date Time")))
#defines center of orlando as datum
orlcenter <- c(28.5383,-81.3792)
#finds radius of the earth at that point
rad <- findradius(orlcenter)
#converts lat/long to a vector of nm in x and y from center of orlando
for (i in 1:nrow(matData)){
temp <- converttognomonic(rad, cbind(matData[i,1],matData[i,2]), orlcenter)
matData[i,1] <- temp[1]
matData[i,2] <- temp[2]
}
colnames(matData) <- c("Y(nm)", "X(nm)", "Time(Unix)")
#sets the datum as the upper left corner of the dataset
matData[,1] <- max(matData[,1]) - matData[,1]
matData[,2] <- matData[,2] - min(matData[,2])
#compensates for min and max edgecases in which the distance from datum would be indexed at 0
matData[,1] <- matData[,1] + 0.00000001
matData[,2] <- matData[,2] + 0.00000001
#bin sizing: 0.2 X 0.2 nm in size. Each index of matrix represents 0.2 square nautical miles of orlando
bs <- 0.2
#rounds each data point to the nearest matrix index
matData[,1] <- ceiling(matData[,1]/bs)*bs
matData[,2] <- ceiling(matData[,2]/bs)*bs
#defines map size as a whole in (i,j)
idimsize <- max(matData[,2])/bs
jdimsize <- max(matData[,1])/bs
startTime <- min(matData[,3])
#adds one in order to round all days up to 1
matData[,3] <- matData[,3] - startTime + 1
#86400 is 1 day in seconds converts unix time into days from startTime
matData[,3] <- ceiling(matData[,3]/86400)
colnames(matData) <- c("Y(nm)", "X(nm)","Time(Days from startTime)")
#declare a list to store sparse matrices
l <- vector("list", nrow(matData))
#create a sparse matrix for each point in dataset then form a list in order to look at datapoints in different timeframes
#fill list with matrices
for(x in 1:nrow(matData)){
l[x] <- sparseMatrix(i=matData[x,2]/bs, j = matData[x,1]/bs, dims = c(idimsize,jdimsize))
}
fullMatrixList <- vector("list")
rm(l,i,idimsize,jdimsize,orlcenter,bs,temp,rad,startTime)
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R/main.R', echo=TRUE)
crimeMatrixOverTime <- function(l,matData){
#load in prep matrix function
source("./prepMatrix.R")
horiznTime <- 150
shift <- 1
#Objective: Find the maximum number of crimes in a 150 day timeframe and use that to scale the matrix from 0,1
#only need to calculate maxinDat/diffmaxinDat once, then hardcode to save time when running
#Dat <- findmax(matData, l, horiznTime)
#maxinDat <- Dat[1]
#diffmaxinDat <- Dat[2]
maxinDat <- 458
diffmaxinDat <- 21
#initializes timeframe, necessary because loop adds and subtracts the prior and current timeframe
ctime <- 1
timeframe <- l[matData[,3] < ctime + horiznTime & matData[,3] >= ctime]
smat <- Reduce("+", timeframe)
finmat <- prepMatrix(smat, maxinDat)
fn <- paste("./images/Changeovertime/day", toString(ctime),".png", sep = "")
writePNG(1 - finmat, target = fn)
#initializes the list used when finding the differenes from the average (input to differences.R)
lmat <- vector("list", length = max(matData[,3]) - horiznTime)
lmat[[1]] <- as.matrix(smat)
#loop over every timeframe and calculate the matrix over each timeframe and the change in matrix over time
for(ctime in 2:(max(matData[,3]) - horiznTime)){
#adding the next day to timeframe, subtracting last day from timeframe
ad <- l[matData[,3] == ctime + horiznTime - 1]
sb <- l[matData[,3] == ctime - shift]
#if no crimes in either the day you add or subtract, skip to next day
if (is.null(Reduce("+", ad)) & is.null(Reduce("+", sb))){
#donothing
#if there is no crime in the day you are trying to add, only subtract the previous day
}else if (is.null(Reduce("+", ad))){
smat <- smat - Reduce("+",sb)
sdifmat <- Reduce("+", sb)
#if there is no crime in the day you are trying to subtract, only add the next day
}else if (is.null(Reduce("+", sb))){
smat <- smat + Reduce("+", ad)
sdifmat <- Reduce("+", ad)
}else{
smat <- smat + Reduce("+", ad) - Reduce("+",sb)
sdifmat <- Reduce("+", ad) + Reduce("+", sb)
}
#convert to full matrix and scale, stores that entry in list (for differences.R), and converts the change in matrix over time to matrix and scale
finmat <- prepMatrix(smat, maxinDat)
lmat[[ctime]] <- as.matrix(smat)
difmat <- prepMatrix(sdifmat, diffmaxinDat)
#sets print directory for d/dt matrix, prints to loc
fn <- paste("./images/differenceinchangeovertime/day", toString(ctime),".png", sep = "")
writePNG(1 - difmat, target = fn)
#sets print directory for reg matrix, prints to loc
fn <- paste("./images/Changeovertime/day", toString(ctime),".png", sep = "")
writePNG(1 - finmat, target = fn)
}
#return
return(lmat)
}
#call from script matrixovertime.R
fullMatrixList <- crimeMatrixOverTime(l, matData)
getwd()
setwd("E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R")
source('E:/Data Science Stuff/GitRepos/Orlando_Crime/crimeTrendAnalysisCode/R/main.R', echo=TRUE)
#call from script matrixovertime.R
fullMatrixList <- crimeMatrixOverTime(l, matData)
