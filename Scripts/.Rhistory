delLon <- lon1 - lon2
converttoNM <- function(rad, projcoords, centralcoords){
lat1 <- NISTdegTOradian(projcoords[1])
lat2 <- NISTdegTOradian(centralcoords[1])
lon1 <- NISTdegTOradian(projcoords[2])
lon2 <- NISTdegTOradian(centralcoords[2])
dellat <- lat1 - lat2
delLon <- lon1 - lon2
a <- (sin(dellat/2)^2) + cos(lat1)*cos(lat2)*(sin(delLon/2)^2)
c <- 2*atan2(sqrt(a),sqrt(1-a))
d <- rad * c
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttoNM(orlrad, testpoint, orlcenter)
library(NISTunits)
x <- converttoNM(orlrad, testpoint, orlcenter)
converttoNM <- function(rad, projcoords, centralcoords){
lat1 <- NISTdegTOradian(projcoords[1])
lat2 <- NISTdegTOradian(centralcoords[1])
lon1 <- NISTdegTOradian(projcoords[2])
lon2 <- NISTdegTOradian(centralcoords[2])
dellat <- lat1 - lat2
delLon <- lon1 - lon2
a <- (sin(dellat/2)^2) + cos(lat1)*cos(lat2)*(sin(delLon/2)^2)
c <- 2*atan2(sqrt(a),sqrt(1-a))
d <- rad * c
converttoNM <- d
}
x <- converttoNM(orlrad, testpoint, orlcenter)
x <- converttoNM(orlrad, testpoint, orlcenter)
converttoNM <- function(rad, projcoords, centralcoords){
lat1 <- NISTdegTOradian(projcoords[1])
lat2 <- NISTdegTOradian(centralcoords[1])
lon1 <- NISTdegTOradian(projcoords[2])
lon2 <- NISTdegTOradian(centralcoords[2])
dellat <- lat1 - lat2
delLon <- lon1 - lon2
a <- (sin(dellat/2)^2) + cos(lat1)*cos(lat2)*(sin(delLon/2)^2)
c <- 2*atan2(sqrt(a),sqrt(1-a))
d <- rad * c
converttoNM <- d * 0.539957
}
x <- converttoNM(orlrad, testpoint, orlcenter)
latlong <- (x,y)
converttognomonic <- function(rad = findradius(centralcoords), projcoords, centralcoords){
phi = projcoords[0]
lamb = projcoords[1]
phin = centralcoords[0]
lambn = centralcoords[1]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)cos(phi)cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
return(dist)
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttognomonic(rad = findradius(orlcenter[1]), testpoint, orlcenter)
converttognomonic <- function(rad = findradius(centralcoords), projcoords, centralcoords){
phi = projcoords[0]
lamb = projcoords[1]
phin = centralcoords[0]
lambn = centralcoords[1]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)cos(phi)cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
return(dist)
}
converttognomonic <- function(rad = findradius(centralcoords), projcoords, centralcoords){
phi = projcoords[0]
lamb = projcoords[1]
phin = centralcoords[0]
lambn = centralcoords[1]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)cos(phi)cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
converttognomonic <- dist
}
x <- converttognomonic(rad = findradius(orlcenter[1]), testpoint, orlcenter)
converttognomonic <- function(rad, projcoords, centralcoords){
phi = projcoords[0]
lamb = projcoords[1]
phin = centralcoords[0]
lambn = centralcoords[1]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)cos(phi)cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
converttognomonic <- dist
}
converttognomonic <- function(rad, projcoords, centralcoords){
phi = projcoords[0]
lamb = projcoords[1]
phin = centralcoords[0]
lambn = centralcoords[1]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)*cos(phi)*cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
converttognomonic <- dist
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttognomonic(orlrad, testpoint, orlcenter)
x <- converttognomonic(orlrad, testpoint, orlcenter)
rad = 6360
projcoords <-  c(28.45, -81.31)
centralcoords <- c(28.5383,-81.3792)
phi = projcoords[0]
rad <- 6360
projcoords <-  c(28.45, -81.31)
centralcoords <- c(28.5383,-81.3792)
phi <-  projcoords[0]
phi <-  projcoords[0]
lamb <-  projcoords[1]
rad <- 6360
projcoords <-  c(28.45, -81.31)
centralcoords <- c(28.5383,-81.3792)
phi <-  projcoords[1]
lamb <-  projcoords[2]
phin <-  centralcoords[1]
lambn <-   centralcoords[2]
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)*cos(phi)*cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
library(NISTunits)
rad <- 6360
projcoords <-  c(28.45, -81.31)
centralcoords <- c(28.5383,-81.3792)
phi <-  NISTdegTOradian(projcoords[1])
lamb <-  NISTdegTOradian(projcoords[2])
phin <-  NISTdegTOradian(centralcoords[1])
lambn <- NISTdegToradian(centralcoords[2])
lambn <- NISTdegTOradian(centralcoords[2])
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)*cos(phi)*cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
dist <- sqrt(x^2 + y^2) * rad
library(NISTunits)
converttoNM <- function(rad, projcoords, centralcoords){
lat1 <- NISTdegTOradian(projcoords[1])
lat2 <- NISTdegTOradian(centralcoords[1])
lon1 <- NISTdegTOradian(projcoords[2])
lon2 <- NISTdegTOradian(centralcoords[2])
dellat <- lat1 - lat2
delLon <- lon1 - lon2
a <- (sin(dellat/2)^2) + cos(lat1)*cos(lat2)*(sin(delLon/2)^2)
c <- 2*atan2(sqrt(a),sqrt(1-a))
d <- rad * c
#kilometers to NM conversion
converttoNM <- d * 0.539957
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttoNM(orlrad, testpoint, orlcenter)
converttoNM <- function(rad, projcoords, centralcoords){
lat1 <- NISTdegTOradian(projcoords[1])
lat2 <- NISTdegTOradian(centralcoords[1])
lon1 <- NISTdegTOradian(projcoords[2])
lon2 <- NISTdegTOradian(centralcoords[2])
dellat <- lat1 - lat2
delLon <- lon1 - lon2
a <- (sin(dellat/2)^2) + cos(lat1)*cos(lat2)*(sin(delLon/2)^2)
c <- 2*atan2(sqrt(a),sqrt(1-a))
d <- rad * c
#kilometers to NM conversion
converttoNM <- d * 0.539957
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttoNM(orlrad, testpoint, orlcenter)
converttognomonic <- function(rad, projcoords, centralcoords){
phi <-  NISTdegTOradian(projcoords[1])
lamb <-  NISTdegTOradian(projcoords[2])
phin <-  NISTdegTOradian(centralcoords[1])
lambn <- NISTdegTOradian(centralcoords[2])
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)*cos(phi)*cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
#0.539957 is conversion factor km -> naut miles
dist <- sqrt(x^2 + y^2) * rad * 0.539957
converttognomonic <- dist
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttognomonic(orlrad, testpoint, orlcenter)
library(NISTunits)
converttognomonic <- function(rad, projcoords, centralcoords){
phin <-  NISTdegTOradian(projcoords[1])
lambn <-  NISTdegTOradian(projcoords[2])
phi <-  NISTdegTOradian(centralcoords[1])
lamb <- NISTdegTOradian(centralcoords[2])
x <- cos(phi)*sin(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
y <- cos(phin)*sin(phi)-sin(phin)*cos(phi)*cos(lamb-lambn)/(sin(phin)*sin(phi)+cos(phin)*cos(phi)*cos(lamb-lambn))
#0.539957 is conversion factor km -> naut miles
dist <- sqrt(x^2 + y^2) * rad * 0.539957
converttognomonic <- dist
}
findradius <- function(centralcoords){
#radius at equator (km)
r1 <- 6378
#radius at pole (km)
r2 <- 6357
radius <- sqrt(((r1*r1*cos(centralcoords[1]))^2) + (r2*r2*sin(centralcoords[1]))^2)/((r1*cos(centralcoords[1])^2) + (r2*sin(centralcoords[1])^2))
return(radius)
}
orlcenter <- c(28.5383,-81.3792)
testpoint <- c(28.45, -81.31)
orlrad <- findradius(orlcenter)
x <- converttognomonic(orlrad, testpoint, orlcenter)
